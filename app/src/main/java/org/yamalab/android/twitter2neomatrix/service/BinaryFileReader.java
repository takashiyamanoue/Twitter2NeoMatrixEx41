package org.yamalab.android.twitter2neomatrix.service;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;


import android.content.Context;
import android.os.Environment;
import android.util.Log;

public class BinaryFileReader {

	AdkService context;
	
/**
 * ????????????????????????????????????
 * http://www.nana.or.jp/~hiramats/java/filedump/index.html
 * ?????????????????????????????????????????????
 */
//public class FileInOut08 {
  byte[] fontArray;

  public byte[] getBinaryArray(){
	  return fontArray;
  }
  
  byte[] readFile(String path){
//	    File inputFile = new File(path);
        byte[] w=new byte[1024]; 
	    InputStream in=null;
	    ByteArrayOutputStream out=null;
	    try {
	      // ??????????????????????????????
          //????????????????????????????????????????????????
          in=context.openFileInput(path); 
          //??????????????????????????????
          out=new ByteArrayOutputStream();
          while (true) {
              int size=in.read(w);
              if (size<=0) break;
              out.write(w,0,size);
          }
          out.close();
          
          //????????????????????????????????????????????????
          in.close();
          
          //ByteArrayOutputStream???????????????????????????????????????
          return out.toByteArray();

	    // ??????????????????????????????????????????????????????????????????
	    } catch(Exception e) {
	      e.printStackTrace();
	    }	  
	    return null;
  }
  byte[] readSDFile(String name){
//	    File inputFile = new File(path);
      byte[] w=new byte[1024]; 
	    InputStream in=null;
	    ByteArrayOutputStream out=null;
	    String fileName="";
	    try {
	      // ??????????????????????????????
        //????????????????????????????????????????????????
	    	File path =android.os.Environment.getExternalStorageDirectory();
	        String state = Environment.getExternalStorageState();
	        if (state.equals(Environment.MEDIA_MOUNTED)){
	    	    //??????????????????
	            fileName = path.toString()+
//	            		"/Android/data/"+ context.getPackageName() + "/files/"+name;  
	            		"/Download/"+name;
		   		Log.d("BinaryFileRead","fineName="+fileName );
		   		context.showLog("BinaryFileReader-readSDFile ..."+fileName);
		   	    in = new FileInputStream(fileName);
//	    	    in=context.openFileInput(fileName); 	        	
	        }else{
	    	    //?????????
		   		 Log.d("BinaryFileRead","The SD card is not mounted.");
		   		 context.sendCommandToActivity("activity append output","The SD card is not mounted.");
		            fileName = path.toString()+
		            		"/Android/data/"+ context.getPackageName() + "/files/"+name;  
//		            		"/Download/"+name;
//		   		    fileName = name;
			   		Log.d("BinaryFileRead","fineName="+fileName );
			   		context.showLog("BinaryFileReader-readSDFile ..."+fileName);
			   	    in = new FileInputStream(fileName);
//	        	return null;
	        }
	        //??????????????????????????????
	        out=new ByteArrayOutputStream();
	        while (true) {
	        	int size=in.read(w);
	        	if (size<=0) break;
	        	out.write(w,0,size);
	        }
	        out.close();
        
	        //????????????????????????????????????????????????
	        in.close();
        
	        //ByteArrayOutputStream???????????????????????????????????????
	        return out.toByteArray();

	    // ??????????????????????????????????????????????????????????????????
	    } catch(Exception e) {
	   		 Log.d("BinaryFileRead","file read error...fileName="+fileName);
	   		 context.sendCommandToActivity("activity append output", 
	   				 "No font file. Please place "+fileName+".\n");
	   		 e.printStackTrace();
	    }	  
	    return null;
}

  void dumpBinary(byte[] f, int from, int length){
	  if(f==null) {
		  System.out.println("read error");
		  return;
	  }
      long adr=from;
      String s="";
      String c="";
      int size=f.length;
      char[] cs=new char[1];
      if(size<length) length=size;
      int eadr=(int)adr+length;
      while(adr<=eadr){
        long a=adr;
//        for(int y=0;y<16;y++) {
        if(a<size) {
            s=Integer.toHexString((int)a).toUpperCase();
            s="00000000".substring(s.length())+s;
        } else {
            s="        ";
        }
        System.out.print(s);
        String sline="";
        String cline="";
        for(int x=0;x<16;x++ ) {
            if(a<size) {
              int d=((int)fontArray[(int)a]) & 0xff;
              String ss=Integer.toHexString(d).toUpperCase();
              sline=sline+"00".substring(ss.length())+ss+" ";

              if((d<0x20) || (d>0xde) ||
                 ((d>0x7e) && (d<0xa1))) { d=0x2e; }
              cs[0]=(char)d;
              cline = cline+new String(cs)+" ";
            } else {
              s="  ";
              c=" ";
            }
            a++;
          }
          System.out.print(" "+sline);
          System.out.println(" "+cline);
          adr=a;
        }
//      }	  
	  
  }
  
  void dumpBinary(byte[] f){
	  if(f==null) {
		  System.out.println("read error");
		  return;
	  }
      long adr=0;
      String s="";
      String c="";
      int size=f.length;
      char[] cs=new char[1];
      while(adr<=size){
        long a=adr;
//        for(int y=0;y<16;y++) {
        if(a<size) {
            s=Integer.toHexString((int)a).toUpperCase();
            s="00000000".substring(s.length())+s;
        } else {
            s="        ";
        }
        System.out.print(s);
        String sline="";
        String cline="";
        for(int x=0;x<16;x++ ) {
            if(a<size) {
              int d=((int)fontArray[(int)a]) & 0xff;
              String ss=Integer.toHexString(d).toUpperCase();
              sline=sline+"00".substring(ss.length())+ss+" ";

              if((d<0x20) || (d>0xde) ||
                 ((d>0x7e) && (d<0xa1))) { d=0x2e; }
              cs[0]=(char)d;
              cline = cline+new String(cs)+" ";
            } else {
              s="  ";
              c=" ";
            }
            a++;
          }
          System.out.print(" "+sline);
          System.out.println(" "+cline);
          adr=a;
        }
//      }	  
  }
  
  BinaryFileReader(AdkService c, String path){
     this.context=c;
//	 fontArray=readFile(path);    // binary file ?????????... 16x16 JIS?????????????????????;;
     fontArray=readSDFile(path);
	 if(fontArray==null){
		 Log.d("BinaryFileRead","reading font failed!");
		 context.showLog("reading font failed!");
	 }
//	 dumpBinary(fontArray,1024,2048); // 0-1024 ?????????????????????
//	 FontAccessor fa=new FontAccessor(fontArray,16,0x00F0); // ????????????????????????????????????
	 byte[] f;
	 /*
	 fa.printFont(fa.getFontRaw(0x00F0));
	 fa.printFont(fa.getFontRaw(0x0110));
	 fa.printFont(fa.getFontRaw(0x0120));
	 fa.printFont(fa.getFontRaw(0x0140));	
	 fa.printFont(fa.getFontJIS(0x2321));
	 fa.printFont(fa.getFontJIS(0x2122));
	 fa.printFont(fa.getFontJIS(0x2123));
	 fa.printFont(fa.getFontJIS(0x2124));
	
     for(int i=0;i<127;i++){
    	 fa.printFont(fa.getFontJIS(i));
     }
     
     for(int i=0;i<64;i++){
    	 fa.printFont(fa.getFontJIS(0x4861+i)); 
    	    // 0x7421 + i ??? JIS ???????????????????????????????????????????????????
     }
      */
//     String s="abc ????????????????????????";
     /*
     0000000 61 62 63 20 e4 bb 8a e6 97 a5 e3 81 af e6 99 b4
     0000010 e3 82 8c e3 81 a7 e3 81 99 e3 80 82 0a         
     */
	 /*
     char[] sc=fa.getJISString(s);
     for(int i=0;i<sc.length;i++){
    	 char si=sc[i];
    	 fa.printFont(fa.getFontJIS(si));
     }
     */
  }
  public static void main(String[] args) {
    // args[0] ... ?????????????????????????????????
	  String inputFileName=args[0];
//	  new BinaryFileReader(inputFileName);

  }
}
